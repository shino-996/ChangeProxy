<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>space.shino.changenetworkproxysettings</string>
	<key>connections</key>
	<dict>
		<key>1FCF6CDA-2FED-4FD5-823D-557A59E87938</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>57CD4D15-AC9E-4574-9097-F003066296D0</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>38D59E73-7283-4B82-BC79-7ECFADEE1D29</key>
		<array/>
		<key>57CD4D15-AC9E-4574-9097-F003066296D0</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>7919BA66-FEE0-49FD-8A01-6C8FA67BC90E</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>BA386325-89BF-41B8-9F7E-B458BE3F90A6</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>F7B80F8C-3279-47C4-BA05-C204436725B7</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>CEC43A5A-24C5-4975-B81A-078832AA1A58</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>F3D24D9E-EB6B-4295-B5BD-91E8C2C499FA</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>D3E0E934-88B0-4DB5-953C-F7BB4187FD30</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>7919BA66-FEE0-49FD-8A01-6C8FA67BC90E</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>F3D24D9E-EB6B-4295-B5BD-91E8C2C499FA</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>F7B80F8C-3279-47C4-BA05-C204436725B7</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>F7B80F8C-3279-47C4-BA05-C204436725B7</key>
		<array/>
	</dict>
	<key>createdby</key>
	<string>shino</string>
	<key>description</key>
	<string>Change the auto proxy or the socks5 proxy</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>ChangeNetworkProxySettings</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>pacon</string>
				<key>subtext</key>
				<string></string>
				<key>text</key>
				<string>打开PAC代理</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>CEC43A5A-24C5-4975-B81A-078832AA1A58</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>#PAC文件路径改为自己设置的路径
netstat -f inet -nr | awk '/^default/{print $NF}' | while read interface
do
    networksetup -listnetworkserviceorder | grep -B1 ${interface} | grep -v ${interface} | awk '{print $2}' | while read service
    do
        networksetup -setautoproxyurl "${service}" http://127.0.0.1:88/whitelist.pac
    done
done</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>F3D24D9E-EB6B-4295-B5BD-91E8C2C499FA</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>pacoff</string>
				<key>subtext</key>
				<string></string>
				<key>text</key>
				<string>关闭PAC代理</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>D3E0E934-88B0-4DB5-953C-F7BB4187FD30</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>netstat -f inet -nr | awk '/^default/{print $NF}' | while read interface
do
    networksetup -listnetworkserviceorder | grep -B1 ${interface} | grep -v ${interface} | awk '{print $2}' | while read service
    do
        networksetup -setautoproxystate "${service}" off
    done
done</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>7919BA66-FEE0-49FD-8A01-6C8FA67BC90E</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>sockson</string>
				<key>subtext</key>
				<string></string>
				<key>text</key>
				<string>打开SOCKS5代理</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>1FCF6CDA-2FED-4FD5-823D-557A59E87938</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>#SOCKS5端口改为自己设置的IP和端口
netstat -f inet -nr | awk '/^default/{print $NF}' | while read interface
do
    networksetup -listnetworkserviceorder | grep -B1 ${interface} | grep -v ${interface} | awk '{print $2}' | while read service
    do
        networksetup -setsocksfirewallproxy "${service}" localhost 1080 off
    done
done</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>57CD4D15-AC9E-4574-9097-F003066296D0</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>socksoff</string>
				<key>subtext</key>
				<string></string>
				<key>text</key>
				<string>关闭SOCKS5代理</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>BA386325-89BF-41B8-9F7E-B458BE3F90A6</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>netstat -f inet -nr | awk '/^default/{print $NF}' | while read interface
do
    networksetup -listnetworkserviceorder | grep -B1 ${interface} | grep -v ${interface} | awk '{print $2}' | while read service
    do
        networksetup -setsocksfirewallproxystate "${service}" off
    done
done</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>F7B80F8C-3279-47C4-BA05-C204436725B7</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>listproxy</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>正在检查</string>
				<key>script</key>
				<string>#/bin/bash

#因为所有网络服务代理状态是同时改变的, 查看其中一个服务即可
interface=$(netstat -f inet -nr | awk '/^default/ { print $NF }' | awk ' NR == 1 { print }')
service=$(networksetup -listnetworkserviceorder | grep -B1 ${interface} | grep -v ${interface} | awk '{print $2}')
pacStatus=$(networksetup -getautoproxyurl ${service} | sed -n '2p')
socksStatus=$(networksetup -getsocksfirewallproxy ${service} | sed -n '1p')
wifiName=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}')

if [ "$pacStatus" = "Enabled: Yes" ]
then
pacStatus="ON"
else
pacStatus="OFF"
fi

if [ "$socksStatus" = "Enabled: Yes" ]
then
socksStatus="ON"
else
socksStatus="OFF"
fi

cat &lt;&lt; EOB
{
    "items": 
    [{
        "uid": "当前网络",
        "title": "${service}",
        "subtitle": "当前网络",
        "icon": { "path": "icon.png" }
    },
    {
        "uid": "当前Wi-Fi",
        "title": "${wifiName}",
        "subtitle": "当前Wi-Fi",
        "icon": { "path": "icon.png" }
    },
    {
        "uid": "PAC代理",
        "title": "${pacStatus}",
        "subtitle":"PAC代理",
        "icon": { "path": "icon.png" }
    },
    {
        "uid": "SOCKS5代理",
        "title": "${socksStatus}",
        "subtitle":"SOCKS5代理",
        "icon": { "path": "icon.png" }
    }]
}
EOB</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string>显示当前使用的代理类型</string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>38D59E73-7283-4B82-BC79-7ECFADEE1D29</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>pac</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>正在检查</string>
				<key>script</key>
				<string>#/bin/bash

#因为所有网络服务代理状态是同时改变的, 查看其中一个服务即可
interface=$(netstat -f inet -nr | awk '/^default/ { print $NF }' | awk ' NR == 1 { print }')
service=$(networksetup -listnetworkserviceorder | grep -B1 ${interface} | grep -v ${interface} | awk '{print $2}')
pacStatus=$(networksetup -getautoproxyurl ${service} | sed -n '2p')
socksStatus=$(networksetup -getsocksfirewallproxy ${service} | sed -n '1p')
wifiName=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}')

if [ "$pacStatus" = "Enabled: Yes" ]
then
pacStatus="ON"
else
pacStatus="OFF"
fi

if [ "$socksStatus" = "Enabled: Yes" ]
then
socksStatus="ON"
else
socksStatus="OFF"
fi

cat &lt;&lt; EOB
{
    "items": 
    [{
        "uid": "当前网络",
        "title": "${service}",
        "subtitle": "当前网络",
        "icon": { "path": "icon.png" }
    },
    {
        "uid": "当前Wi-Fi",
        "title": "${wifiName}",
        "subtitle": "当前Wi-Fi",
        "icon": { "path": "icon.png" }
    },
    {
        "uid": "PAC代理",
        "title": "${pacStatus}",
        "subtitle":"PAC代理",
        "icon": { "path": "icon.png" }
    },
    {
        "uid": "SOCKS5代理",
        "title": "${socksStatus}",
        "subtitle":"SOCKS5代理",
        "icon": { "path": "icon.png" }
    }]
}
EOB</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string>显示当前使用的代理类型</string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>36981DBB-3642-4D7E-A06B-0B9A536CEEAC</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>socks</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>正在检查</string>
				<key>script</key>
				<string>#/bin/bash

#因为所有网络服务代理状态是同时改变的, 查看其中一个服务即可
interface=$(netstat -f inet -nr | awk '/^default/ { print $NF }' | awk ' NR == 1 { print }')
service=$(networksetup -listnetworkserviceorder | grep -B1 ${interface} | grep -v ${interface} | awk '{print $2}')
pacStatus=$(networksetup -getautoproxyurl ${service} | sed -n '2p')
socksStatus=$(networksetup -getsocksfirewallproxy ${service} | sed -n '1p')
wifiName=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}')

if [ "$pacStatus" = "Enabled: Yes" ]
then
pacStatus="ON"
else
pacStatus="OFF"
fi

if [ "$socksStatus" = "Enabled: Yes" ]
then
socksStatus="ON"
else
socksStatus="OFF"
fi

cat &lt;&lt; EOB
{
    "items": 
    [{
        "uid": "当前网络",
        "title": "${service}",
        "subtitle": "当前网络",
        "icon": { "path": "icon.png" }
    },
    {
        "uid": "当前Wi-Fi",
        "title": "${wifiName}",
        "subtitle": "当前Wi-Fi",
        "icon": { "path": "icon.png" }
    },
    {
        "uid": "PAC代理",
        "title": "${pacStatus}",
        "subtitle":"PAC代理",
        "icon": { "path": "icon.png" }
    },
    {
        "uid": "SOCKS5代理",
        "title": "${socksStatus}",
        "subtitle":"SOCKS5代理",
        "icon": { "path": "icon.png" }
    }]
}
EOB</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string>显示当前使用的代理类型</string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>5E04FC96-19B7-4782-8094-7387A467DE61</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
	</array>
	<key>readme</key>
	<string></string>
	<key>uidata</key>
	<dict>
		<key>1FCF6CDA-2FED-4FD5-823D-557A59E87938</key>
		<dict>
			<key>xpos</key>
			<integer>180</integer>
			<key>ypos</key>
			<integer>280</integer>
		</dict>
		<key>36981DBB-3642-4D7E-A06B-0B9A536CEEAC</key>
		<dict>
			<key>xpos</key>
			<integer>340</integer>
			<key>ypos</key>
			<integer>500</integer>
		</dict>
		<key>38D59E73-7283-4B82-BC79-7ECFADEE1D29</key>
		<dict>
			<key>xpos</key>
			<integer>180</integer>
			<key>ypos</key>
			<integer>500</integer>
		</dict>
		<key>57CD4D15-AC9E-4574-9097-F003066296D0</key>
		<dict>
			<key>xpos</key>
			<integer>340</integer>
			<key>ypos</key>
			<integer>280</integer>
		</dict>
		<key>5E04FC96-19B7-4782-8094-7387A467DE61</key>
		<dict>
			<key>xpos</key>
			<integer>490</integer>
			<key>ypos</key>
			<integer>500</integer>
		</dict>
		<key>7919BA66-FEE0-49FD-8A01-6C8FA67BC90E</key>
		<dict>
			<key>xpos</key>
			<integer>490</integer>
			<key>ypos</key>
			<integer>170</integer>
		</dict>
		<key>BA386325-89BF-41B8-9F7E-B458BE3F90A6</key>
		<dict>
			<key>xpos</key>
			<integer>180</integer>
			<key>ypos</key>
			<integer>390</integer>
		</dict>
		<key>CEC43A5A-24C5-4975-B81A-078832AA1A58</key>
		<dict>
			<key>xpos</key>
			<integer>180</integer>
			<key>ypos</key>
			<integer>60</integer>
		</dict>
		<key>D3E0E934-88B0-4DB5-953C-F7BB4187FD30</key>
		<dict>
			<key>xpos</key>
			<integer>180</integer>
			<key>ypos</key>
			<integer>170</integer>
		</dict>
		<key>F3D24D9E-EB6B-4295-B5BD-91E8C2C499FA</key>
		<dict>
			<key>xpos</key>
			<integer>490</integer>
			<key>ypos</key>
			<integer>60</integer>
		</dict>
		<key>F7B80F8C-3279-47C4-BA05-C204436725B7</key>
		<dict>
			<key>xpos</key>
			<integer>650</integer>
			<key>ypos</key>
			<integer>390</integer>
		</dict>
	</dict>
	<key>webaddress</key>
	<string>https://shino.space</string>
</dict>
</plist>
